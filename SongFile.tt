<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
    var tagTypes = new List<string>(new[] { "artist", "albumArtist", "trackTitle", "album", "composer" });
    tagTypes.AddRange(Enumerable.Range(1, 16).Select(i => "custom" + i.ToString()));
#>
using System.IO;
using static MusicBeePlugin.Plugin;

namespace MusicBeePlugin
{
    public class SongFile
    {
        private MusicBeeApiInterface mbApiInterface;

        #region constructor
        public SongFile(MusicBeeApiInterface api, string filePath)
        {
            mbApiInterface = api;
            FullPath = filePath;
        }
        #endregion

        #region public properties
        public string FullPath { get; set; }
        
        private string fileName = null;
        public string FileName => fileName ?? (fileName = Path.GetFileName(FullPath));

        public string this[string name]
        {
            get { return typeof(SongFile).GetProperty(name)?.GetValue(this, null) as string; }
            set { typeof(SongFile).GetProperty(name)?.SetValue(this, value, null); }
        }

        public string this[MetaDataType type]
        {
            get { return this[type.ToString()]; }
            set { this[type.ToString()] = value; }
        }
        <# foreach (string tagType in tagTypes) { #>

        private string <#= tagType #> = null;
        public string <#= ToPascalCase(tagType) #>
        {
            get { return <#= tagType #> ?? (<#= tagType #> = mbApiInterface.Library_GetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>)); }
            set { mbApiInterface.Library_SetFileTag(FullPath, MetaDataType.<#= ToPascalCase(tagType) #>, <#= tagType #> = value); }
        }
        <# } #>
#endregion

        #region public methods
        public bool WriteTag(SortCustomTag condition, string value)
        {
            if (!condition.Enabled) return false;

            if (Config.Instance.DontOverwrite)
            {
                string newTagValue = this[condition.Name]; // ソート元のタグの取得
                string oldTagValue = this[condition.SortTag.ToString()];

                // ソート元のタグとの一致判定
                // 一致しなかった場合はソートタグにも値が含まれていると見做して中断
                if (newTagValue != oldTagValue) return false;
            }
            this[condition.Name] = value;
            return true;
        }

        public bool Commit() => mbApiInterface.Library_CommitTagsToFile(FullPath);
        #endregion
    }
}

<#+
public static string ToPascalCase(string text)
{
    if (text.Length < 1) return string.Empty;
    return char.ToUpper(text[0]) + text.Substring(1);
}
#>